#ifndef MATRIX_H
#define MATRIX_H

#include "T.h"

typedef struct {
    T **data; // матрица
    int size; // размер матрицы
} Matrix;

/*------------------------------------------------------------------------------
  Функция: выделяет массив размером size x size.
  Вход: указатель на структуру, в которой есть массив и его размер.
  Вывод: без возврата.
------------------------------------------------------------------------------*/
void createMatrix(Matrix *matrix, int size) ;

/*------------------------------------------------------------------------------
  Функция: вычисляет минимум, максимум и сумму интервала [n1, n2].
  Вход: указатель на вектор и целые числа, образующие диапазон [n1, n2].
  Выход: кортеж (struct T), состав которого равен (min, max, sum).
------------------------------------------------------------------------------*/
T SumMinMax(int v[], int n1, int n2);

/*------------------------------------------------------------------------------
  Функция: вычисляет все возможные кортежи (минимум, максимум, сумма) для каждого диапазона
  и построить матрицу.
  Вход: указатель на матрицу, указатель на вектор и его размер (N).
  Вывод: без возврата.
------------------------------------------------------------------------------*/
void processMatrix(Matrix *matrix, int v[], int tam);

/*------------------------------------------------------------------------------
  Функция: добавляет 1 к каждому элементу, содержащемуся в диапазоне [n1, n2].
  Вход: указатель на матрицу, указатель на вектор и его размер (N).
  Вывод: без возврата.
------------------------------------------------------------------------------*/
void addMatrix(Matrix *matrix, int v[], int tam, int n1, int n2);

/*------------------------------------------------------------------------------
  Функция: вычитает 1 из каждого элемента, присутствующего в интервале [n1, n2].
  Вход: указатель на матрицу, указатель на вектор и его размер (N).
  Вывод: без возврата.
------------------------------------------------------------------------------*/
void subMatrix(Matrix *matrix, int v[], int tam, int n1, int n2);

/*------------------------------------------------------------------------------
  Функция: освобождает память, выделенную массивом.
  Вход: указатель на структуру Matrix, содержащую освобождаемую матрицу.
  Вывод: без возврата.
------------------------------------------------------------------------------*/
void freeMatrix(Matrix *matrix) ;

#endif


